

在分布式服务架构下，一个 Web 请求从网关流入，有可能会调用多个服务对请求进行处理，拿到最终结果。这个过程中每个服务之间的通信又是单独的网络请求，无论请求流经的哪个服务出了故障或者处理过慢都会对前端造成影响。

![处理一个Web请求要调用的多个服务](https://cdn.learnku.com/uploads/images/202105/23/6964/RmOXUqRL9s.png!large)

为了能更方便的查询哪个环节的服务出现了问题，现在常用的解决方案是为整个系统引入分布式链路跟踪。

**在分布式链路跟踪中有两个重要的概念：跟踪（trace）和 跨度（ span）。trace 是请求在分布式系统中的整个链路视图，span 则代表整个链路中不同服务内部的视图，span 组合在一起就是整个 trace 的视图。**

在整个请求的调用链中，请求会一直携带 traceid 往下游服务传递，每个服务内部也会生成自己的 spanid 用于生成自己的内部调用视图，并和traceid一起传递给下游服务。

traceid 在请求的整个调用链中始终保持不变，所以在日志中可以通过 traceid 查询到整个请求期间系统记录下来的所有日志。请求到达每个服务后，服务都会为请求生成spanid，而随请求一起从上游传过来的上游服务的 spanid 会被记录成parent-spanid或者叫 pspanid。当前服务生成的 spanid 随着请求一起再传到下游服务时，这个spanid 又会被下游服务当做 pspanid 记录。

![分布式链路跟踪中的trace和span](https://cdn.learnku.com/uploads/images/202105/23/6964/HyNFLMh4no.png!large)



通过在访问日志和业务日志里记录的traceid、spanid 和 pspanid 能完整的还原出整个请求的调用链路视图，对错误排查能起到很大的帮助。



上面就是分布式链路跟踪的原理，我们可以自己实现，也可以依赖 opentracing 这种开源的解决方案。一般是在请求到达网关的开始，生成本次请求的traceid 和 在网关服务内的spanid ，将他们放在HTTP 请求头或者RPC调用的元数据里，在调用下游服务时继续向下传递。下游的RESTful API服务的全局路由中间件和RPC服务的拦截器里会接收请求携带的traceid 和生成当次请求在服务内部的spanid，从上游接收到的 spanid 在这里会被转换成 pspanid。除此之外我们甚至可以把 traceid 和 spanid 注入到一些数据库连接池应用里，让记录的慢SQL日志里同样能打上 traceid 和 spanid 信息，为请求的响应过慢提供有效的分析数据。

